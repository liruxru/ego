<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
	<!-- Druid的内置了log4jdbc来显示SQL语句 -->
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
    	<property name="resultSetLogEnabled" value="true" />
	</bean>
	<bean id="stat" class="com.alibaba.druid.filter.stat.StatFilter" />
	<bean id="mergeStat" class="com.alibaba.druid.filter.stat.MergeStatFilter" />
	<!-- 配置数据源 阿里连接池 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" /> 
		<property name="username" value="${jdbc.username}" /> 
		<property name="password" value="${jdbc.password}" /> 
		<property name="initialSize" value="${jdbc.initialSize}" /> 
	    <property name="minIdle" value="${jdbc.minIdle}" /> 
	    <property name="maxActive" value="${jdbc.maxActive}" /> 
	    <property name="maxWait" value="${jdbc.maxWait}" /> 
	    <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" /> 
	    <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" /> 
	 <!--    <property name="validationQuery" value="${jdbc.validationQuery}" />  -->
	    <property name="testWhileIdle" value="${jdbc.testWhileIdle}" /> 
	    <property name="testOnBorrow" value="${jdbc.testOnBorrow}" /> 
	    <property name="testOnReturn" value="${jdbc.testOnReturn}" /> 
	    <property name="removeAbandoned" value="${jdbc.removeAbandoned}" /> 
	    <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" /> 
<!--	    <property name="logAbandoned" value="${jdbc.logAbandoned}" /> -->
		<!-- 监控数据库 -->
		<property name="filters" value="stat,mergeStat" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="proxyFilters">
	        <list>
	            <ref bean="log-filter"/>
	        </list>
	    </property>
	</bean>
	<!-- 映射Mapper目录 属于mybatis的配置-->
	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ego.mapper" />
	</bean>
	
	<!-- 配置MyBatis的sqlSession -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 这个可以引入mybatis的其他配置，比如打印sql -->
		<!-- <property name="configLocation" value="classpath:mybatis.xml"></property> -->
		<property name="dataSource" ref="dataSource" />
	</bean>


	
	<!-- 去除注解事物  交由配置方式加入事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
	<!-- AOP配置--> 
	<aop:config>
		<aop:pointcut expression="execution (* com.ego.service.*.*(..))" id="serviceMethodAOP"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethodAOP"/>
	</aop:config>
	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 以add 等开头的加入事物管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="get*" propagation="REQUIRED" rollback-for="Exception" read-only="true"/>
			<tx:method name="select*" propagation="REQUIRED" rollback-for="Exception" read-only="true"/>
			<tx:method name="find*" propagation="REQUIRED" rollback-for="Exception" read-only="true"/>
			<tx:method name="*"  read-only="true"/>
		</tx:attributes>
	</tx:advice>
</beans>
